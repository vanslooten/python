"""
Bounce.py - Demonstration of OOP with bouncing balls using Pygame

Instructions:
1. Make sure you have Python installed (https://www.python.org/downloads/)
2. Install pygame by running the following command in your terminal:
   pip install pygame
3. Run this file to start the bouncing balls demo:
   python Bounce.py
You can modify Ball.py and Bounce.py to experiment with OOP concepts.

AI generated by Copilot in Visual Studio Code.
Prompts used:
Create a simple Ball class in Ball.py that can be used to demonstrate pure object oriented principles
to students. It is Ok to use Pygame. Then create a class Bounce in Bounce.py that creates a Window
in which Balls are being launched at random intervals and with random properties (color, size, speed).
The balls bounce onto the sides of the Window.
---
Add documentation by comments in both files, for each function. Add general instructions to the top
of Bounce.py on how to get started (eg. installing pygame with pip)
--
Change the game background to white and allow the window to be resized and to go to full screen mode.
"""

import pygame
import random
from Ball import Ball

class Bounce:
    """
    Main class to handle the bouncing balls simulation window.
    """
    def __init__(self, width=800, height=600):
        """
        Initialize the Pygame window and simulation parameters.
        :param width: Width of the window
        :param height: Height of the window
        """
        pygame.init()
        self.width = width
        self.height = height
        # Allow window resizing
        self.screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
        pygame.display.set_caption('Bouncing Balls')
        self.clock = pygame.time.Clock()
        # List to hold all Ball objects:
        self.balls = []
        self.running = True
        self.spawn_timer = 0
        self.fullscreen = False

    def random_ball(self):
        """
        Create a Ball object with random position, color, size, and speed.
        :return: Ball instance
        """
        radius = random.randint(10, 40)
        x = random.randint(radius, self.width - radius)
        y = random.randint(radius, self.height - radius)
        color = [random.randint(0, 255) for _ in range(3)]
        speed = (random.choice([-5, -4, -3, 3, 4, 5]), random.choice([-5, -4, -3, 3, 4, 5]))
        return Ball(x, y, radius, color, speed)

    def run(self):
        """
        Main loop for the simulation. Handles events, spawns balls, and updates/draws them.
        """
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.KEYDOWN:
                    # Toggle fullscreen with F11
                    if event.key == pygame.K_F11:
                        self.fullscreen = not self.fullscreen
                        if self.fullscreen:
                            self.screen = pygame.display.set_mode((self.width, self.height), pygame.FULLSCREEN)
                        else:
                            self.screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
                elif event.type == pygame.VIDEORESIZE:
                    # Update window size on resize
                    self.width, self.height = event.w, event.h
                    self.screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
            self.spawn_timer += 1
            # Spawn a new ball at random intervals:
            if self.spawn_timer > random.randint(30, 90):
                self.balls.append(self.random_ball())
                self.spawn_timer = 0
            # Fill background with white
            self.screen.fill((255, 255, 255))
            # Update and draw all balls:
            for ball in self.balls:
                ball.move(self.width, self.height)
                ball.draw(self.screen)
            pygame.display.flip()
            self.clock.tick(60)
        pygame.quit()

if __name__ == "__main__":
    # Start the bouncing balls simulation
    Bounce().run()
